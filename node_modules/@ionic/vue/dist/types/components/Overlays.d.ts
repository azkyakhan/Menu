import { JSX } from '@ionic/core/components';
export declare const IonActionSheet: import("vue").DefineComponent<JSX.IonActionSheet & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    header?: string;
    mode?: import("@ionic/core").Mode;
    animated?: boolean;
    translucent?: boolean;
    isOpen?: boolean;
    backdropDismiss?: boolean;
    buttons?: (string | import("@ionic/core/components").ActionSheetButton<any>)[];
    cssClass?: string | string[];
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").ActionSheetAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    subHeader?: string;
    onIonActionSheetDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonActionSheetDidPresent?: (event: CustomEvent<void>) => void;
    onIonActionSheetWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonActionSheetWillPresent?: (event: CustomEvent<void>) => void;
}>, {}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
export declare const IonAlert: import("vue").DefineComponent<JSX.IonAlert & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    message?: string | import("@ionic/core/components").IonicSafeString;
    header?: string;
    mode?: import("@ionic/core").Mode;
    animated?: boolean;
    translucent?: boolean;
    isOpen?: boolean;
    backdropDismiss?: boolean;
    buttons?: (string | import("@ionic/core/components").AlertButton)[];
    cssClass?: string | string[];
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").AlertAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    subHeader?: string;
    inputs?: import("@ionic/core/components").AlertInput[];
    onIonAlertDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonAlertDidPresent?: (event: CustomEvent<void>) => void;
    onIonAlertWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonAlertWillPresent?: (event: CustomEvent<void>) => void;
}>, {}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
export declare const IonLoading: import("vue").DefineComponent<JSX.IonLoading & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    message?: string | import("@ionic/core/components").IonicSafeString;
    mode?: import("@ionic/core").Mode;
    animated?: boolean;
    spinner?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-small" | "lines-sharp" | "lines-sharp-small";
    duration?: number;
    translucent?: boolean;
    isOpen?: boolean;
    backdropDismiss?: boolean;
    cssClass?: string | string[];
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").LoadingAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    showBackdrop?: boolean;
    onIonLoadingDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonLoadingDidPresent?: (event: CustomEvent<void>) => void;
    onIonLoadingWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonLoadingWillPresent?: (event: CustomEvent<void>) => void;
}>, {}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
export declare const IonPicker: import("vue").DefineComponent<JSX.IonPicker & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    mode?: import("@ionic/core").Mode;
    animated?: boolean;
    duration?: number;
    isOpen?: boolean;
    backdropDismiss?: boolean;
    buttons?: import("@ionic/core/components").PickerButton[];
    cssClass?: string | string[];
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").PickerAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    showBackdrop?: boolean;
    columns?: import("@ionic/core/components").PickerColumn[];
    onIonPickerDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonPickerDidPresent?: (event: CustomEvent<void>) => void;
    onIonPickerWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonPickerWillPresent?: (event: CustomEvent<void>) => void;
}>, {}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
export declare const IonToast: import("vue").DefineComponent<JSX.IonToast & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    message?: string | import("@ionic/core/components").IonicSafeString;
    header?: string;
    mode?: import("@ionic/core").Mode;
    animated?: boolean;
    color?: string;
    icon?: string;
    duration?: number;
    translucent?: boolean;
    position?: "bottom" | "middle" | "top";
    isOpen?: boolean;
    buttons?: (string | import("@ionic/core/components").ToastButton)[];
    cssClass?: string | string[];
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").ToastAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    onIonToastDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonToastDidPresent?: (event: CustomEvent<void>) => void;
    onIonToastWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonToastWillPresent?: (event: CustomEvent<void>) => void;
}>, {}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
export declare const IonModal: import("vue").DefineComponent<JSX.IonModal & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    mode?: import("@ionic/core").Mode;
    trigger?: string;
    animated?: boolean;
    isOpen?: boolean;
    backdropDismiss?: boolean;
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").ModalAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    showBackdrop?: boolean;
    backdropBreakpoint?: number;
    breakpoints?: number[];
    handle?: boolean;
    initialBreakpoint?: number;
    presentingElement?: HTMLElement;
    swipeToClose?: boolean;
    onDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onDidPresent?: (event: CustomEvent<void>) => void;
    onIonModalDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonModalDidPresent?: (event: CustomEvent<void>) => void;
    onIonModalWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonModalWillPresent?: (event: CustomEvent<void>) => void;
    onWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onWillPresent?: (event: CustomEvent<void>) => void;
}>, {}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
export declare const IonPopover: import("vue").DefineComponent<JSX.IonPopover & import("../vue-component-lib/overlays").OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    event: any;
} & {
    mode?: import("@ionic/core").Mode;
    trigger?: string;
    animated?: boolean;
    component?: import("@ionic/core").ComponentRef;
    size?: import("@ionic/core/components").PopoverSize;
    translucent?: boolean;
    side?: import("@ionic/core/components").PositionSide;
    componentProps?: unknown;
    isOpen?: boolean;
    backdropDismiss?: boolean;
    enterAnimation?: import("@ionic/core/components").AnimationBuilder;
    htmlAttributes?: import("@ionic/core/components").PopoverAttributes;
    keyboardClose?: boolean;
    leaveAnimation?: import("@ionic/core/components").AnimationBuilder;
    showBackdrop?: boolean;
    onDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onDidPresent?: (event: CustomEvent<void>) => void;
    onWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onWillPresent?: (event: CustomEvent<void>) => void;
    alignment?: LineAlignSetting;
    arrow?: boolean;
    dismissOnSelect?: boolean;
    reference?: import("@ionic/core/components").PositionReference;
    triggerAction?: import("@ionic/core/components").TriggerAction;
    onIonPopoverDidDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonPopoverDidPresent?: (event: CustomEvent<void>) => void;
    onIonPopoverWillDismiss?: (event: CustomEvent<import("@ionic/core/components").OverlayEventDetail<any>>) => void;
    onIonPopoverWillPresent?: (event: CustomEvent<void>) => void;
}>, {
    event: any;
}> | import("vue").DefineComponent<unknown, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
