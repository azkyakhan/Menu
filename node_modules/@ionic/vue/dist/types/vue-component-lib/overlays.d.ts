import { VNode } from 'vue';
export interface OverlayProps {
    isOpen?: boolean;
}
export declare const defineOverlayContainer: <Props extends object>(name: string, defineCustomElement: () => void, componentProps?: string[], controller?: any) => import("vue").DefineComponent<Props & OverlayProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<Props & OverlayProps>>, import("vue").ExtractDefaultPropTypes<Props & OverlayProps>> | import("vue").DefineComponent<unknown, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
}>, {}>;
